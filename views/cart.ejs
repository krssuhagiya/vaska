<!DOCTYPE html>
<html lang="en">
<%-include('partials/head')%>
<body class="tracking-wide bg-[#FAF8F0] text-[#1e1e19] font-[Montserrat]">
    <%-include('partials/topbar')%>
    <%-include('partials/navbar')%>

    <div class="max-w-7xl mx-auto px-4 py-12">
        <div class="text-center mb-12">
            <h1 class="text-3xl font-semibold tracking-widest mb-2">SHOPPING CART</h1>
            <p class="text-gray-600">Review and manage your selected items</p>
        </div>

        <% if (!cart || cart.length === 0) { %>
            <div class="bg-white rounded-xl shadow-sm p-12 text-center max-w-2xl mx-auto transform hover:scale-[1.01] transition-all duration-300">
                <div class="w-20 h-20 bg-[#fdf5e6] rounded-full flex items-center justify-center mx-auto mb-6">
                    <i class="ri-shopping-cart-line text-5xl text-[#bc8701]"></i>
                </div>
                <h3 class="text-2xl font-semibold mb-3">Your Cart is Empty</h3>
                <p class="text-gray-600 mb-8">Looks like you haven't added any items to your cart yet.</p>
                <a href="/" class="inline-block bg-[#bc8701] text-white px-8 py-3 rounded-lg hover:bg-[#a67701] transition duration-300 hover:shadow-lg">
                    Continue Shopping
                </a>
            </div>
        <% } else { %>
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2 space-y-6">
                    <!-- Cart Progress -->
                    <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 rounded-full bg-[#bc8701] text-white flex items-center justify-center">
                                    <i class="ri-shopping-cart-line"></i>
                                </div>
                                <span class="font-medium">Cart</span>
                            </div>
                            <div class="flex-1 mx-4 h-1 bg-gray-200 rounded-full">
                                <div class="w-1/3 h-full bg-[#bc8701] rounded-full"></div>
                            </div>
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 rounded-full bg-gray-200 text-gray-400 flex items-center justify-center">
                                    <i class="ri-bank-card-line"></i>
                                </div>
                                <span class="text-gray-400">Payment</span>
                            </div>
                        </div>
                    </div>

                    <% let subtotal = 0; %>
                    <% cart.forEach(item => { %>
                        <% const itemTotal = (item.priceAtAddition || 0) * (item.quantity || 1); %>
                        <% subtotal += itemTotal; %>
                        <div class="bg-white rounded-xl shadow-sm p-6 transform hover:-translate-y-1 transition-all duration-300" data-item-id="<%= item.product._id %>">
                            <div class="flex flex-col md:flex-row items-center gap-6">
                                <div class="w-32 h-32 flex-shrink-0 bg-[#fdf5e6] rounded-xl p-2">
                                    <img src="/<%= item.product.image.replace(/\\/g, '/') %>" 
                                         alt="<%= item.product.name %>" 
                                         class="w-full h-full object-contain rounded-lg"
                                         onerror="this.src='/images/placeholder.png'">
                                </div>
                                <div class="flex-grow">
                                    <div class="flex justify-between items-start mb-4">
                                        <div>
                                            <a href="/product/<%= item.product._id %>" class="block">
                                                <h3 class="text-xl font-semibold text-[#65350F] hover:text-[#bc8701] transition-colors mb-2">
                                                    <%= item.product.name %>
                                                </h3>
                                            </a>
                                            <p class="text-sm text-gray-600">Category: <span class="font-medium"><%= item.product.category %></span></p>
                                        </div>
                                        <button class="text-gray-400 hover:text-red-500 transition-colors" onclick="removeItem('<%= item.product._id %>')">
                                            <i class="ri-delete-bin-line text-xl"></i>
                                        </button>
                                    </div>
                                    
                                    <div class="flex flex-wrap items-center justify-between gap-6 mt-4 pt-4 border-t border-gray-100">
                                        <div class="bg-gray-50 rounded-lg p-2 flex items-center gap-3">
                                            <button class="w-8 h-8 flex items-center justify-center text-gray-600 hover:text-[#bc8701] border border-gray-300 rounded-md transition-colors <%= (item.quantity || 1) <= 1 ? 'opacity-50 cursor-not-allowed' : '' %>"
                                                    onclick="updateQuantity('<%= item.product._id %>', -1)"
                                                    <%= (item.quantity || 1) <= 1 ? 'disabled' : '' %>>
                                                <i class="ri-subtract-line"></i>
                                            </button>
                                            <span class="quantity-display w-8 text-center font-medium"><%= item.quantity || 1 %></span>
                                            <button class="w-8 h-8 flex items-center justify-center text-gray-600 hover:text-[#bc8701] border border-gray-300 rounded-md transition-colors <%= (item.quantity || 1) >= 10 ? 'opacity-50 cursor-not-allowed' : '' %>"
                                                    onclick="updateQuantity('<%= item.product._id %>', 1)"
                                                    <%= (item.quantity || 1) >= 10 ? 'disabled' : '' %>>
                                                <i class="ri-add-line"></i>
                                            </button>
                                        </div>
                                        
                                        <div class="flex flex-col items-end">
                                            <span class="text-sm text-gray-500">₹<%= item.priceAtAddition || 0 %> each</span>
                                            <span class="text-lg font-semibold text-[#bc8701] item-total-price">₹<%= (item.priceAtAddition || 0) * (item.quantity || 1) %></span>
                                        </div>
                                    </div>
                                    <div class="quantity-error text-red-500 text-sm mt-2"></div>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <div class="lg:col-span-1">
                    <div class="bg-white rounded-xl shadow-sm p-8 sticky top-6">
                        <h4 class="text-xl font-semibold mb-6">Order Summary</h4>
                        
                        <div class="space-y-4 mb-6">
                            <div class="flex justify-between items-center py-2">
                                <span class="text-gray-600">Subtotal</span>
                                <span class="font-medium subtotal-amount">₹<%= subtotal %></span>
                            </div>
                            <div class="flex justify-between items-center py-2">
                                <span class="text-gray-600">Shipping</span>
                                <span class="text-green-600 font-medium">Free</span>
                            </div>
                            <div class="flex justify-between items-center py-2">
                                <span class="text-gray-600">Tax</span>
                                <span class="font-medium">₹0</span>
                            </div>
                        </div>
                        
                        <div class="border-t border-dashed border-gray-200 pt-4 mb-6">
                            <div class="flex justify-between items-center">
                                <span class="text-lg font-semibold">Total</span>
                                <span class="text-xl font-semibold text-[#bc8701] total-amount">₹<%= subtotal %></span>
                            </div>
                            <p class="text-xs text-gray-500 mt-2">* Prices are inclusive of all taxes</p>
                        </div>

                        <form action="/checkout" method="POST">
                            <button type="submit" class="w-full bg-[#bc8701] text-white py-4 rounded-lg font-semibold hover:bg-[#a67701] transition duration-300 flex items-center justify-center gap-2 hover:shadow-lg transform hover:-translate-y-0.5">
                                <i class="ri-secure-payment-line"></i>
                                Proceed to Checkout
                            </button>
                        </form>

                        <div class="mt-6 flex items-center justify-center gap-2 text-sm text-gray-600">
                            <i class="ri-shield-check-line text-green-600"></i>
                            <span>Secure Checkout</span>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <%-include('partials/footer')%>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const MAX_QUANTITY = 10;
        const MIN_QUANTITY = 1;

        function formatPrice(price) {
            return '₹' + parseFloat(price).toFixed(2);
        }

        function updateCartUI(itemId, newQuantity, itemPrice) {
            const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
            if (!cartItem) return;

            // Update quantity display
            const quantitySpan = cartItem.querySelector('.quantity-display');
            if (quantitySpan) {
                quantitySpan.textContent = newQuantity;
            }

            // Update buttons state
            const decreaseBtn = cartItem.querySelector('button:first-of-type');
            const increaseBtn = cartItem.querySelector('button:last-of-type');
            
            if (decreaseBtn) {
                decreaseBtn.disabled = newQuantity <= MIN_QUANTITY;
                decreaseBtn.classList.toggle('opacity-50', newQuantity <= MIN_QUANTITY);
                decreaseBtn.classList.toggle('cursor-not-allowed', newQuantity <= MIN_QUANTITY);
            }
            if (increaseBtn) {
                increaseBtn.disabled = newQuantity >= MAX_QUANTITY;
                increaseBtn.classList.toggle('opacity-50', newQuantity >= MAX_QUANTITY);
                increaseBtn.classList.toggle('cursor-not-allowed', newQuantity >= MAX_QUANTITY);
            }

            // Calculate and update item total
            const itemTotal = newQuantity * itemPrice;
            const totalPriceDisplay = cartItem.querySelector('.item-total-price');
            if (totalPriceDisplay) {
                totalPriceDisplay.textContent = formatPrice(itemTotal);
            }

            // Update cart summary
            updateCartSummary();
        }

        function showQuantityError(cartItem, message) {
            const errorDiv = cartItem.querySelector('.quantity-error');
            if (errorDiv) {
                errorDiv.style.opacity = '0';
                errorDiv.textContent = message;
                errorDiv.style.display = 'block';
                
                // Fade in
                setTimeout(() => {
                    errorDiv.style.opacity = '1';
                }, 10);
                
                // Fade out
                setTimeout(() => {
                    errorDiv.style.opacity = '0';
                    setTimeout(() => {
                        errorDiv.style.display = 'none';
                    }, 300);
                }, 3000);
            }
        }

        function updateCartSummary() {
            let newSubtotal = 0;
            document.querySelectorAll('[data-item-id]').forEach(item => {
                const quantity = parseInt(item.querySelector('.quantity-display').textContent) || 0;
                const price = parseFloat(item.querySelector('.text-sm.text-gray-500').textContent.replace('₹', '')) || 0;
                newSubtotal += quantity * price;
            });

            // Update subtotal and total in summary
            document.querySelectorAll('.subtotal-amount').forEach(el => {
                el.textContent = formatPrice(newSubtotal);
            });
            document.querySelectorAll('.total-amount').forEach(el => {
                el.textContent = formatPrice(newSubtotal);
            });
        }

        function updateQuantity(productId, change) {
            const cartItem = document.querySelector(`[data-item-id="${productId}"]`);
            if (!cartItem) return;

            const quantitySpan = cartItem.querySelector('.quantity-display');
            const currentQuantity = parseInt(quantitySpan.textContent) || 1;
            const newQuantity = currentQuantity + parseInt(change);

            // Check quantity limits
            if (newQuantity < MIN_QUANTITY) {
                showQuantityError(cartItem, 'Minimum quantity is 1');
                return;
            }
            if (newQuantity > MAX_QUANTITY) {
                showQuantityError(cartItem, 'Maximum quantity is 10');
                return;
            }

            // Show loading state
            showQuantityError(cartItem, 'Updating...');

            // Disable buttons during update
            const buttons = cartItem.querySelectorAll('button');
            buttons.forEach(btn => btn.disabled = true);

            fetch(`/cart/update-quantity/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ change: parseInt(change) })
            })
            .then(async response => {
                const data = await response.json();
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to update quantity');
                }
                return data;
            })
            .then(data => {
                if (data.success) {
                    const itemPrice = parseFloat(cartItem.querySelector('.text-sm.text-gray-500').textContent.replace('₹', '')) || 0;
                    updateCartUI(productId, newQuantity, itemPrice);
                    showQuantityError(cartItem, ''); // Clear any error messages
                } else {
                    throw new Error(data.error || 'Failed to update quantity');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showQuantityError(cartItem, error.message);
                // Revert the quantity display
                quantitySpan.textContent = currentQuantity;
                // Re-enable buttons and update UI
                const itemPrice = parseFloat(cartItem.querySelector('.text-sm.text-gray-500').textContent.replace('₹', '')) || 0;
                updateCartUI(productId, currentQuantity, itemPrice);
            })
            .finally(() => {
                // Re-enable buttons
                buttons.forEach(btn => btn.disabled = false);
            });
        }

        function removeItem(productId) {
            if (confirm('Are you sure you want to remove this item?')) {
                const cartItem = document.querySelector(`[data-item-id="${productId}"]`);
                if (!cartItem) return;

                fetch(`/cart/remove/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(async response => {
                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.error || 'Failed to remove item');
                    }
                    return data;
                })
                .then(data => {
                    if (data.success) {
                        cartItem.style.transition = 'all 0.3s ease';
                        cartItem.style.opacity = '0';
                        cartItem.style.transform = 'translateX(-20px)';
                        
                        setTimeout(() => {
                            cartItem.remove();
                            updateCartSummary();
                            
                            const remainingItems = document.querySelectorAll('[data-item-id]');
                            if (remainingItems.length === 0) {
                                location.reload();
                            }
                        }, 300);
                    } else {
                        throw new Error('Failed to remove item');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showQuantityError(cartItem, error.message);
                });
            }
        }
    </script>
    <script src="/js/script.js"></script>

</body>
</html>
