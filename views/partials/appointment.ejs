<!-- Appointment Section -->
<div class="appointment text-white">
  
  <!-- Top Section -->
  <div class="top h-[95vh] w-full bg-[url('./img/appointment.webp')] bg-cover bg-center relative">
    <div class="absolute inset-0 bg-black/50"></div>
    <div class="content flex flex-col items-center justify-end gap-4 h-full pb-20 text-white text-center relative z-10">
      <h4 class="text-2xl tracking-[0.7rem] font-semibold animate-fadeIn">SCHEDULE AN APPOINTMENT</h4>
      <p class="max-w-lg px-4 animate-fadeIn animation-delay-200">
        Click below to schedule a virtual or an in-store appointment at one of our flagship stores.
      </p>
      <button 
        id="openAppointmentModal" 
        class="relative overflow-hidden bg-white text-black py-3 px-8 rounded-md tracking-wide font-medium transition-all duration-300 hover:bg-[#65350F] hover:text-white transform hover:scale-105 shadow-lg group animate-fadeIn animation-delay-400"
      >
        <span class="relative z-10">Book Now</span>
        <span class="absolute bottom-0 left-0 w-full h-0 bg-[#65350F] transition-all duration-300 group-hover:h-full -z-0"></span>
        <i class="ri-calendar-line ml-2"></i>
      </button>
    </div>
  </div>

  <!-- Bottom Section -->
  <div class="down bg-[#65350F] py-7 flex flex-col md:flex-row items-center justify-center gap-4 px-4">
    <h4 class="text-lg text-center md:text-left font-medium">Enter Into The World of VASKA</h4>
    <form id="newsletterForm" class="w-full md:w-auto">
      <div class="inp border-b-2 border-white flex items-center gap-2 pb-1 w-full md:w-auto transition-all duration-300 hover:border-opacity-80">
        <input 
          type="email" 
          id="newsletterEmail"
          class="outline-none bg-transparent text-white placeholder:text-gray-300 px-2 w-full md:w-64"
          placeholder="Enter your email here"
          required
        />
        <button type="submit" class="bg-transparent border-none transition-transform duration-300 hover:scale-110">
          <i class="ri-send-plane-2-fill text-white cursor-pointer"></i>
        </button>
      </div>
    </form>
  </div>

  <!-- Appointment Modal -->
  <div id="appointmentModal" class="fixed inset-0 bg-black/70 z-50 hidden flex items-center justify-center backdrop-blur-sm overflow-y-auto py-6">
    <div class="bg-white text-black p-4 sm:p-6 rounded-lg w-full max-w-md mx-4 my-auto shadow-2xl transform transition-all duration-300 scale-95 opacity-0 max-h-[90vh] overflow-y-auto" id="modalContent">
      <div class="flex justify-between items-center mb-4 sm:mb-6 border-b pb-4 border-gray-200 sticky top-0 bg-white z-10">
        <h3 class="text-xl sm:text-2xl font-semibold text-[#65350F] flex items-center">
          <i class="ri-calendar-check-line mr-2"></i>
          Book Your Appointment
        </h3>
        <button id="closeAppointmentModal" class="text-gray-500 hover:text-gray-800 transition-colors p-1 hover:bg-gray-100 rounded-full">
          <i class="ri-close-line text-2xl"></i>
        </button>
      </div>
      
      <form id="appointmentForm" class="space-y-4">
        <div class="space-y-4 sm:space-y-5">
          <!-- Personal Information Section -->
          <div class="bg-gray-50 p-3 sm:p-4 rounded-lg">
            <h4 class="text-sm uppercase tracking-wider text-gray-500 mb-3 font-medium">Personal Information</h4>
            <div class="space-y-3 sm:space-y-4">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                <div class="relative">
                  <i class="ri-user-line absolute left-3 top-3 text-gray-400"></i>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    required
                    class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] transition-all"
                    placeholder="Enter your full name"
                  />
                </div>
              </div>
              
              <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                <div class="relative">
                  <i class="ri-mail-line absolute left-3 top-3 text-gray-400"></i>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    required
                    class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] transition-all"
                    placeholder="Enter your email address"
                  />
                </div>
              </div>
              
              <div>
                <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                <div class="relative">
                  <i class="ri-phone-line absolute left-3 top-3 text-gray-400"></i>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    required
                    class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] transition-all"
                    placeholder="Enter your phone number"
                  />
                </div>
              </div>
            </div>
          </div>
          
          <!-- Appointment Details Section -->
          <div class="bg-gray-50 p-3 sm:p-4 rounded-lg">
            <h4 class="text-sm uppercase tracking-wider text-gray-500 mb-3 font-medium">Appointment Details</h4>
            <div class="space-y-3 sm:space-y-4">
              <div>
                <label for="appointmentType" class="block text-sm font-medium text-gray-700 mb-1">Appointment Type</label>
                <div class="relative">
                  <i class="ri-store-line absolute left-3 top-3 text-gray-400"></i>
                  <select
                    id="appointmentType"
                    name="appointmentType"
                    required
                    class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] appearance-none bg-white transition-all"
                  >
                    <option value="">Select appointment type</option>
                    <option value="virtual">Virtual Consultation</option>
                    <option value="in-store">In-Store Visit</option>
                    <option value="bridal">Bridal Consultation</option>
                    <option value="groom">Groom Consultation</option>
                  </select>
                  <i class="ri-arrow-down-s-line absolute right-3 top-3 text-gray-400 pointer-events-none"></i>
                </div>
              </div>
              
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <div>
                  <label for="appointmentDate" class="block text-sm font-medium text-gray-700 mb-1">Preferred Date</label>
                  <div class="relative">
                    <i class="ri-calendar-line absolute left-3 top-3 text-gray-400"></i>
                    <input
                      type="date"
                      id="appointmentDate"
                      name="appointmentDate"
                      required
                      min="<%= new Date().toISOString().split('T')[0] %>"
                      class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] transition-all"
                    />
                  </div>
                </div>
                
                <div>
                  <label for="appointmentTime" class="block text-sm font-medium text-gray-700 mb-1">Preferred Time</label>
                  <div class="relative">
                    <i class="ri-time-line absolute left-3 top-3 text-gray-400"></i>
                    <input
                      type="time"
                      id="appointmentTime"
                      name="appointmentTime"
                      required
                      class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] transition-all"
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Special Requests</label>
                <div class="relative">
                  <i class="ri-chat-1-line absolute left-3 top-3 text-gray-400"></i>
                  <textarea
                    id="message"
                    name="message"
                    rows="3"
                    class="w-full pl-10 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#65350F] transition-all"
                    placeholder="Any special requests or requirements..."
                  ></textarea>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <button
          type="submit"
          class="w-full bg-[#65350F] text-white py-3 px-4 rounded-md font-medium hover:bg-[#542A0E] transition-all duration-300 mt-4 sm:mt-6 flex items-center justify-center shadow-md hover:shadow-lg transform hover:translate-y-[-2px]"
        >
          <i class="ri-check-line mr-2"></i>
          Confirm Appointment
        </button>
      </form>
      
      <!-- Success Message (Hidden by Default) -->
      <div id="appointmentSuccess" class="hidden mt-4 p-4 sm:p-5 bg-green-50 border border-green-200 text-green-700 rounded-lg">
        <div class="flex flex-col items-center text-center">
          <div class="w-14 h-14 sm:w-16 sm:h-16 bg-green-100 rounded-full flex items-center justify-center mb-3">
            <i class="ri-check-line text-2xl sm:text-3xl text-green-500"></i>
          </div>
          <h4 class="text-base sm:text-lg font-semibold mb-2">Appointment Scheduled!</h4>
          <p class="mb-3">We've received your appointment request and will contact you shortly to confirm.</p>
          <p class="text-xs sm:text-sm text-gray-500">You'll receive a confirmation email with the details.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.8s ease-out forwards;
  }
  
  .animation-delay-200 {
    animation-delay: 0.2s;
  }
  
  .animation-delay-400 {
    animation-delay: 0.4s;
  }

  /* Fix for iOS date inputs */
  @supports (-webkit-touch-callout: none) {
    input[type="date"],
    input[type="time"] {
      min-height: 42px;
      padding-top: 8px;
      padding-bottom: 8px;
    }
  }

  /* Make sure modal fits on small screens */
  @media (max-height: 700px) {
    #modalContent {
      max-height: 85vh;
    }
  }

  @media (max-height: 600px) {
    #modalContent {
      max-height: 90vh;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Appointment Modal Functionality
    const openModalBtn = document.getElementById('openAppointmentModal');
    const closeModalBtn = document.getElementById('closeAppointmentModal');
    const appointmentModal = document.getElementById('appointmentModal');
    const modalContent = document.getElementById('modalContent');
    const appointmentForm = document.getElementById('appointmentForm');
    const appointmentSuccess = document.getElementById('appointmentSuccess');
    
    if (openModalBtn && appointmentModal) {
      openModalBtn.addEventListener('click', function() {
        appointmentModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
        
        // Center modal and ensure it's visible
        modalContent.scrollTop = 0;
        
        // Animate modal entrance
        setTimeout(() => {
          if (modalContent) {
            modalContent.classList.remove('scale-95', 'opacity-0');
            modalContent.classList.add('scale-100', 'opacity-100');
          }
        }, 10);
      });
    }
    
    function closeModal() {
      if (modalContent) {
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');
      }
      
      setTimeout(() => {
        if (appointmentModal) {
          appointmentModal.classList.add('hidden');
          document.body.style.overflow = 'auto'; // Allow scrolling again
        }
        // Reset form and hide success message when modal is closed
        if (appointmentForm) {
          appointmentForm.reset();
          appointmentForm.style.display = 'block';
        }
        if (appointmentSuccess) appointmentSuccess.classList.add('hidden');
      }, 300);
    }
    
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModal);
    }
    
    // Close modal when clicking outside
    if (appointmentModal) {
      appointmentModal.addEventListener('click', function(e) {
        if (e.target === appointmentModal) {
          closeModal();
        }
      });
    }
    
    // Handle form submission scrolling issues on mobile
    if (appointmentForm) {
      const formInputs = appointmentForm.querySelectorAll('input, select, textarea');
      formInputs.forEach(input => {
        input.addEventListener('focus', function() {
          // Small delay to ensure keyboard is open before scrolling
          setTimeout(() => {
            this.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }, 300);
        });
      });
    }
    
    // Form field enhancement
    const formInputs = document.querySelectorAll('#appointmentForm input, #appointmentForm select, #appointmentForm textarea');
    formInputs.forEach(input => {
      input.addEventListener('focus', function() {
        this.parentElement.classList.add('ring-1', 'ring-[#65350F]', 'ring-opacity-50');
      });
      
      input.addEventListener('blur', function() {
        this.parentElement.classList.remove('ring-1', 'ring-[#65350F]', 'ring-opacity-50');
      });
    });
    
    // Appointment Form Submission
    if (appointmentForm) {
      appointmentForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Show loading state
        const submitBtn = appointmentForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i> Processing...';
        submitBtn.disabled = true;
        
        // Get form data
        const formData = new FormData(appointmentForm);
        const appointmentData = Object.fromEntries(formData.entries());
        
        // Here you would typically send data to server
        console.log('Appointment Data:', appointmentData);
        
        // Simulate server delay
        setTimeout(function() {
          // Show success message
          appointmentForm.style.display = 'none';
          appointmentSuccess.classList.remove('hidden');
          
          // Reset button state
          submitBtn.innerHTML = originalBtnText;
          submitBtn.disabled = false;
          
          // Scroll to success message
          appointmentSuccess.scrollIntoView({ behavior: 'smooth', block: 'center' });
          
          // Close modal and reset form after 3 seconds
          setTimeout(function() {
            closeModal();
          }, 3000);
        }, 1500);
      });
    }
    
    // Fix iOS Safari issues
    function fixIOSInputs() {
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      if (isIOS) {
        const dateInputs = document.querySelectorAll('input[type="date"], input[type="time"]');
        dateInputs.forEach(input => {
          input.style.paddingTop = '8px';
          input.style.paddingBottom = '8px';
        });
      }
    }
    
    fixIOSInputs();
    
    // Handle window resize for responsive adjustments
    window.addEventListener('resize', function() {
      if (appointmentModal && !appointmentModal.classList.contains('hidden')) {
        modalContent.style.maxHeight = window.innerHeight * 0.9 + 'px';
      }
    });
    
    // Newsletter Subscription
    const newsletterForm = document.getElementById('newsletterForm');
    if (newsletterForm) {
      newsletterForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const emailInput = document.getElementById('newsletterEmail');
        if (emailInput && emailInput.value) {
          // Here you would send the email to server
          console.log('Newsletter subscription for:', emailInput.value);
          
          // Show toast notification
          const toast = document.createElement('div');
          toast.className = 'fixed bottom-4 right-4 bg-white border-l-4 border-green-500 text-green-700 px-4 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-500 translate-x-full';
          toast.innerHTML = `
            <div class="flex items-center">
              <div class="bg-green-100 p-2 rounded-full mr-3">
                <i class="ri-checkbox-circle-line text-xl text-green-500"></i>
              </div>
              <div>
                <p class="font-medium">Subscribed Successfully!</p>
                <p class="text-sm text-gray-600">Thank you for joining our newsletter.</p>
              </div>
              <button class="ml-auto text-gray-400 hover:text-gray-600 close-toast">
                <i class="ri-close-line text-xl"></i>
              </button>
            </div>
          `;
          
          document.body.appendChild(toast);
          
          // Animate toast entrance
          setTimeout(() => {
            toast.classList.remove('translate-x-full');
            toast.classList.add('translate-x-0');
          }, 10);
          
          // Add close button functionality
          const closeToast = toast.querySelector('.close-toast');
          if (closeToast) {
            closeToast.addEventListener('click', () => {
              toast.classList.add('translate-x-full');
              setTimeout(() => {
                toast.remove();
              }, 500);
            });
          }
          
          // Remove toast after 5 seconds
          setTimeout(() => {
            toast.classList.add('translate-x-full');
            setTimeout(() => {
              toast.remove();
            }, 500);
          }, 5000);
          
          // Reset form
          emailInput.value = '';
        }
      });
    }
  });
</script>